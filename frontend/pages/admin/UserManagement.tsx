import React, { useState, useEffect } from 'react';
import { 
  Search, 
  Plus, 
  Eye, 
  UserCheck, 
  UserX, 
  AlertTriangle,
  Award,
  X
} from 'lucide-react';
import { Card } from '../../components/ui/card';
import { Button } from '../../components/ui/button';
import { Input } from '../../components/ui/input';
import { Badge } from '../../components/ui/badge';
import { Label } from '../../components/ui/label';
import { LoadingSpinner } from '../../components/common/LoadingSpinner';
import { ConfirmationPopup } from '../../components/common/ConfirmationPopup';
import { SuccessNotification } from '../../components/common/SuccessNotification';
import { apiService } from '../../services/apiService';
import { toast } from 'sonner';
import { UserDetailsModal } from '../../components/admin/UserDetailsModal';
import { InactiveUserModal } from '../../components/admin/InactiveUserModal';
import { ReactivateUserModal } from '../../components/admin/ReactivateUserModal';

export const UserManagement: React.FC = () => {
  const [users, setUsers] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showWarningModal, setShowWarningModal] = useState(false);
  const [showCertificateModal, setShowCertificateModal] = useState(false);
  const [showUserDetailsModal, setShowUserDetailsModal] = useState(false);
  const [showInactiveModal, setShowInactiveModal] = useState(false);
  const [showReactivateModal, setShowReactivateModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState<any>(null);
  const [warningData, setWarningData] = useState({
    message: '',
    attachment: null as File | null
  });
  const [certificateData, setCertificateData] = useState({
    title: '',
    message: '',
    attachment: null as File | null
  });
  const [userStats, setUserStats] = useState({
    total: 0,
    active: 0,
    warning: 0,
    inactive: 0,
    audited: 0
  });

  // Popup states
  const [showDeletePopup, setShowDeletePopup] = useState(false);
  const [showSuccessNotification, setShowSuccessNotification] = useState(false);
  const [successData, setSuccessData] = useState({
    type: 'user' as 'user' | 'module' | 'quiz' | 'question' | 'kpi' | 'award' | 'certificate',
    action: 'created' as 'created' | 'updated' | 'deleted' | 'completed',
    itemName: ''
  });
  const [createUserData, setCreateUserData] = useState({
    name: '',
    email: '',
    password: '',
    phone: '',
    department: '',
    manager: '',
    address: '',
    location: '',
    city: '',
    state: '',
    aadhaarNo: '',
    panNo: ''
  });
  const [isCreatingUser, setIsCreatingUser] = useState(false);




  useEffect(() => {
    fetchUsers();
    fetchUserStats();
  }, [filterStatus]);

  const fetchUsers = async () => {
    try {
      setLoading(true);
      const response: any = await apiService.users.getAllUsers({ filter: filterStatus });
      
      // Check if response has users array
      if (response && Array.isArray(response.users)) {
        setUsers(response.users);
      } else if (response && Array.isArray(response)) {
        setUsers(response);
      } else {
        console.log('No users found, starting with empty array');
        setUsers([]);
      }
    } catch (error) {
      console.error('Error fetching users:', error);
      toast.error('Failed to load users');
      setUsers([]);
    } finally {
      setLoading(false);
    }
  };

  const fetchUserStats = async () => {
    try {
      const response: any = await apiService.users.getUserStats();
      if (response && response.stats) {
        setUserStats(response.stats);
      }
    } catch (error) {
      console.error('Error fetching user stats:', error);
    }
  };

    const handleCreateUser = async () => {
    try {
      console.log('Create user button clicked');
      console.log('Form data:', createUserData);
      
      if (!createUserData.name || !createUserData.email || !createUserData.password) {
        toast.error('Name, email, and password are required');
        return;
      }

      setIsCreatingUser(true);
      console.log('Calling API to create user...');
      const response: any = await apiService.users.createUser(createUserData);
      console.log('API response:', response);
      toast.success(`User created successfully! They can login with email: ${createUserData.email}`);
      
      // Add new user to the list (Employee ID will be auto-generated by backend)
      const newUser = {
        _id: response.user._id,
        name: createUserData.name,
        email: createUserData.email,
        phone: createUserData.phone,
        department: createUserData.department,
        manager: createUserData.manager,
        address: createUserData.address,
        location: createUserData.location,
        city: createUserData.city,
        state: createUserData.state,
        aadhaarNo: createUserData.aadhaarNo,
        panNo: createUserData.panNo,
        employeeId: response.user.employeeId, // Use the auto-generated Employee ID from response
        status: 'Active',
        kpiScore: 0,
        isActive: true
      };
      
      setUsers(prev => [...prev, newUser]);
      setShowCreateModal(false);
      setCreateUserData({
        name: '',
        email: '',
        password: '',
        phone: '',
        department: '',
        manager: '',
        address: '',
        location: '',
        city: '',
        state: '',
        aadhaarNo: '',
        panNo: ''
      });
      fetchUserStats(); // Refresh stats after creating user
      
      // Show success notification
      setSuccessData({
        type: 'user',
        action: 'created',
        itemName: newUser.name
      });
      setShowSuccessNotification(true);
    } catch (error: any) {
      console.error('Error creating user:', error);
      
      // Handle specific error cases
      if (error.message?.includes('User already exists') || error.message?.includes('email already exists')) {
        toast.error('A user with this email already exists. Please use a different email address.');
      } else if (error.message?.includes('Backend server is not running')) {
        toast.error('Backend server is not running. Please start the backend server.');
      } else {
        toast.error('Failed to create user: ' + (error.message || 'Unknown error'));
      }
    } finally {
      setIsCreatingUser(false);
    }
  };

  const handleSendWarning = async () => {
    try {
      if (!warningData.message.trim()) {
        toast.error('Warning message is required');
        return;
      }

      await apiService.users.sendWarning(selectedUser._id, warningData.message);
      toast.success('Warning sent to user');
      setUsers(prev => prev.map(user => 
        user._id === selectedUser._id ? { ...user, status: 'Warning' } : user
      ));
      fetchUserStats();
      setShowWarningModal(false);
      setSelectedUser(null);
      setWarningData({ message: '', attachment: null });
    } catch (error) {
      console.error('Error sending warning:', error);
      toast.error('Failed to send warning');
    }
  };

  const handleDeleteUser = async () => {
    try {
      if (!selectedUser) return;
      
      await apiService.users.deleteUser(selectedUser._id);
      setUsers(prev => prev.filter(user => user._id !== selectedUser._id));
      fetchUserStats();
      setShowDeletePopup(false);
      setSelectedUser(null);
      
      // Show success notification
      setSuccessData({
        type: 'user',
        action: 'deleted',
        itemName: selectedUser.name
      });
      setShowSuccessNotification(true);
    } catch (error) {
      console.error('Error deleting user:', error);
      toast.error('Failed to delete user');
    }
  };

  const handleSendCertificate = async () => {
    try {
      if (!certificateData.title.trim() || !certificateData.message.trim()) {
        toast.error('Certificate title and message are required');
        return;
      }

      await apiService.users.sendCertificate(selectedUser._id, certificateData.title, certificateData.message);
      toast.success('Certificate sent to user');
      setShowCertificateModal(false);
      setSelectedUser(null);
      setCertificateData({ title: '', message: '', attachment: null });
    } catch (error) {
      console.error('Error sending certificate:', error);
      toast.error('Failed to send certificate');
    }
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>, type: 'warning' | 'certificate') => {
    const file = event.target.files?.[0];
    if (file) {
      if (type === 'warning') {
        setWarningData(prev => ({ ...prev, attachment: file }));
      } else {
        setCertificateData(prev => ({ ...prev, attachment: file }));
      }
    }
  };

  const handleUserAction = async (userId: string, action: string) => {
    try {
      switch (action) {
        case 'activate':
          await apiService.users.activateUser(userId);
          toast.success('User activated successfully');
          setUsers(prev => prev.map(user => 
            user._id === userId ? { ...user, isActive: true, status: 'Active' } : user
          ));
          fetchUserStats(); // Refresh stats
          break;
        case 'deactivate':
          const inactiveUser = users.find(u => u._id === userId);
          setSelectedUser(inactiveUser);
          setShowInactiveModal(true);
          break;
        case 'setInactive':
          await apiService.users.setUserInactive(userId, 'Other', 'Set inactive by admin');
          toast.success('User set as inactive successfully');
          fetchUsers(); // Refresh users list
          fetchUserStats(); // Refresh stats
          break;
        case 'reactivate':
          const reactivateUser = users.find(u => u._id === userId);
          setSelectedUser(reactivateUser);
          setShowReactivateModal(true);
          break;
        case 'delete':
          const deleteUser = users.find(u => u._id === userId);
          setSelectedUser(deleteUser);
          setShowDeletePopup(true);
          break;
        case 'sendWarning':
          const warningUser = users.find(u => u._id === userId);
          setSelectedUser(warningUser);
          setWarningData({ message: '', attachment: null });
          setShowWarningModal(true);
          break;
        case 'sendCertificate':
          const certificateUser = users.find(u => u._id === userId);
          setSelectedUser(certificateUser);
          setCertificateData({ title: '', message: '', attachment: null });
          setShowCertificateModal(true);
          break;
        case 'view':
          const userToView = users.find(u => u._id === userId);
          console.log('UserManagement: View action triggered for userId:', userId);
          console.log('UserManagement: Found user:', userToView);
          if (userToView) {
            setSelectedUser(userToView);
            setShowUserDetailsModal(true);
          } else {
            toast.error('User not found');
          }
          break;
        default:
          break;
      }
    } catch (error) {
      console.error(`Error performing ${action}:`, error);
      toast.error(`Failed to ${action} user`);
    }
  };

  const filteredUsers = users.filter(user => {
    const matchesSearch = user.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         user.employeeId?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         user.aadhaarNo?.includes(searchTerm) ||
                         user.panNo?.toLowerCase().includes(searchTerm.toLowerCase());

    let matchesFilter = true;
    if (filterStatus !== 'all') {
      if (filterStatus === 'active') {
        matchesFilter = user.isActive === true && user.status === 'Active';
      } else if (filterStatus === 'inactive') {
        matchesFilter = user.isActive === false;
      } else if (filterStatus === 'warning') {
        matchesFilter = user.status === 'Warning';
      } else if (filterStatus === 'audited') {
        matchesFilter = user.status === 'Audited';
      } else {
        matchesFilter = user.status?.toLowerCase() === filterStatus.toLowerCase();
      }
    }

    return matchesSearch && matchesFilter;
  });

  if (loading) {
    return (
      <div className="p-6 flex items-center justify-center min-h-96">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <div className="p-6 space-y-6">
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-4xl font-bold text-blue-600 dark:text-blue-400">
            User Management
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2 text-lg">Manage field executives and their accounts</p>
        </div>
        <Button 
          className="bg-gradient-to-r from-gray-100 to-gray-200 
             hover:from-gray-200 hover:to-gray-300 
             text-gray-800 
             dark:from-gray-800 dark:to-gray-900 
             dark:hover:from-gray-900 dark:hover:to-black 
             dark:text-white 
             px-8 py-3 rounded-xl shadow-lg hover:shadow-xl 
             transition-all duration-300 transform hover:scale-105 
             border border-gray-300 dark:border-gray-600"
          onClick={() => {
            setCreateUserData({
              name: '',
              email: '',
              password: '',
              phone: '',
              department: '',
              manager: '',
              address: '',
              location: '',
              city: '',
              state: '',
              aadhaarNo: '',
              panNo: ''
            });
            setShowCreateModal(true);
          }}
        >
          <Plus className="w-5 h-5 mr-2" />
          Add New User
        </Button>
      </div>

      {/* Search and Filters */}
      <Card className="p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg rounded-2xl">
        <div className="space-y-4">
          <div className="flex gap-6">
            <div className="flex-1 relative">
              <Search className="w-5 h-5 absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500" />
              <Input
                placeholder="Search by name, email, EmpID, Aadhaar, or PAN..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-12 pr-4 py-3 bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white rounded-xl shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
              />
            </div>
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 min-w-[140px]"
            >
              <option value="all">All Users</option>
              <option value="active">Active</option>
              <option value="warning">Warning</option>
              <option value="audited">Audited</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-400">
            💡 You can search by: Name, Email, Employee ID (FE24120001), Aadhaar (123456789012), or PAN (ABCDE1234F)
          </div>
        </div>
      </Card>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg rounded-2xl hover:shadow-xl transition-all duration-300 hover:scale-105">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Total Users</p>
              <p className="text-3xl font-bold text-gray-900 dark:text-white">{userStats.total}</p>
            </div>
            <div className="w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-xl flex items-center justify-center">
              <UserCheck className="w-6 h-6 text-blue-600 dark:text-blue-400" />
            </div>
          </div>
        </Card>
        <Card className="p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg rounded-2xl hover:shadow-xl transition-all duration-300 hover:scale-105">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Active Users</p>
              <p className="text-3xl font-bold text-green-600 dark:text-green-400">
                {userStats.active}
              </p>
            </div>
            <div className="w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-xl flex items-center justify-center">
              <UserCheck className="w-6 h-6 text-green-600 dark:text-green-400" />
            </div>
          </div>
        </Card>
        <Card className="p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg rounded-2xl hover:shadow-xl transition-all duration-300 hover:scale-105">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Warning Users</p>
              <p className="text-3xl font-bold text-yellow-600 dark:text-yellow-400">
                {userStats.warning}
              </p>
            </div>
            <div className="w-12 h-12 bg-yellow-100 dark:bg-yellow-900/30 rounded-xl flex items-center justify-center">
              <AlertTriangle className="w-6 h-6 text-yellow-600 dark:text-yellow-400" />
            </div>
          </div>
        </Card>
        <Card className="p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg rounded-2xl hover:shadow-xl transition-all duration-300 hover:scale-105">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">Inactive Users</p>
              <p className="text-3xl font-bold text-red-600 dark:text-red-400">
                {userStats.inactive}
              </p>
            </div>
            <div className="w-12 h-12 bg-red-100 dark:bg-red-900/30 rounded-xl flex items-center justify-center">
              <UserX className="w-6 h-6 text-red-600 dark:text-red-400" />
            </div>
          </div>
        </Card>
      </div>

      {/* Users Table */}
      <Card className="p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg rounded-2xl">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-gray-200 dark:border-gray-700">
                <th className="text-left py-4 px-2 text-sm font-semibold text-gray-900 dark:text-white">Name</th>
                <th className="text-left py-4 px-2 text-sm font-semibold text-gray-900 dark:text-white">Email</th>
                <th className="text-left py-4 px-2 text-sm font-semibold text-gray-900 dark:text-white">Phone</th>
                <th className="text-left py-4 px-2 text-sm font-semibold text-gray-900 dark:text-white">City</th>
                <th className="text-left py-4 px-2 text-sm font-semibold text-gray-900 dark:text-white">Status</th>
                <th className="text-left py-4 px-2 text-sm font-semibold text-gray-900 dark:text-white">KPI Score</th>
                <th className="text-left py-4 px-2 text-sm font-semibold text-gray-900 dark:text-white">Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredUsers.map((user) => (
                <tr key={user._id} className="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-200">
                  <td className="py-3">
                    <div>
                      <p className="font-medium text-gray-900 dark:text-white">{user.name}</p>
                      <p className="text-sm text-gray-600 dark:text-gray-400">ID: {user.employeeId}</p>
                    </div>
                  </td>
                  <td className="py-3 text-gray-900 dark:text-white">{user.email}</td>
                  <td className="py-3 text-gray-900 dark:text-white">{user.phone}</td>
                  <td className="py-3 text-gray-900 dark:text-white">{user.city || '-'}</td>
                  <td className="py-3">
                    <div className="space-y-1">
                      <Badge variant={
                        user.status === 'Active' ? 'default' :
                        user.status === 'Warning' ? 'secondary' : 'destructive'
                      } className={
                        user.status === 'Active' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200' :
                        user.status === 'Warning' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-200' : 
                        'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200'
                      }>
                        {user.status}
                      </Badge>
                      {user.status === 'Inactive' && user.inactiveReason && (
                        <div className="text-xs text-gray-500 dark:text-gray-400">
                          <p><strong>Reason:</strong> {user.inactiveReason}</p>
                          {user.inactiveDate && (
                            <p><strong>Since:</strong> {new Date(user.inactiveDate).toLocaleDateString()}</p>
                          )}
                        </div>
                      )}
                    </div>
                  </td>
                  <td className="py-3">
                    <span className={`font-medium ${
                      (user.kpiScore || 75) >= 80 ? 'text-green-600 dark:text-green-400' :
                      (user.kpiScore || 75) >= 70 ? 'text-yellow-600 dark:text-yellow-400' : 'text-red-600 dark:text-red-400'
                    }`}>
                      {user.kpiScore || 75}%
                    </span>
                  </td>
                  <td className="py-4">
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleUserAction(user._id, 'view')}
                        title="View Details"
                        className="h-8 w-8 p-0 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 hover:bg-blue-50 dark:hover:bg-blue-900/20 hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-200"
                      >
                        <Eye className="w-4 h-4 text-blue-600 dark:text-blue-400" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleUserAction(user._id, 'sendWarning')}
                        title="Send Warning"
                        className="h-8 w-8 p-0 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 hover:bg-yellow-50 dark:hover:bg-yellow-900/20 hover:border-yellow-300 dark:hover:border-yellow-600 transition-all duration-200"
                      >
                        <AlertTriangle className="w-4 h-4 text-yellow-600 dark:text-yellow-400" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleUserAction(user._id, 'sendCertificate')}
                        title="Send Certificate"
                        className="h-8 w-8 p-0 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 hover:bg-green-50 dark:hover:bg-green-900/20 hover:border-green-300 dark:hover:border-green-600 transition-all duration-200"
                      >
                        <Award className="w-4 h-4 text-green-600 dark:text-green-400" />
                      </Button>
                      {user.isActive ? (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleUserAction(user._id, 'deactivate')}
                          title="Set as Inactive"
                          className="h-8 w-8 p-0 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 hover:bg-red-50 dark:hover:bg-red-900/20 hover:border-red-300 dark:hover:border-red-600 transition-all duration-200"
                        >
                          <UserX className="w-4 h-4 text-red-600 dark:text-red-400" />
                        </Button>
                      ) : (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleUserAction(user._id, 'reactivate')}
                          title="Reactivate User"
                          className="h-8 w-8 p-0 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 hover:bg-green-50 dark:hover:bg-green-900/20 hover:border-green-300 dark:hover:border-green-600 transition-all duration-200"
                        >
                          <UserCheck className="w-4 h-4 text-green-600 dark:text-green-400" />
                        </Button>
                      )}
                      {/* <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleUserAction(user._id, 'delete')}
                        title="Delete User"
                        className="h-8 w-8 p-0 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 hover:bg-red-50 dark:hover:bg-red-900/20 hover:border-red-300 dark:hover:border-red-600 transition-all duration-200"
                      >
                        <Trash2 className="w-4 h-4 text-red-600 dark:text-red-400" />
                      </Button> */}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </Card>

      {/* Create User Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-2 sm:p-4">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-4 sm:p-6 w-full max-w-2xl max-h-[95vh] sm:max-h-[90vh] overflow-y-auto shadow-2xl">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Create New User</h2>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowCreateModal(false)}
                className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="space-y-6">
              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                <p className="text-sm text-blue-800 dark:text-blue-200">
                  <strong>Note:</strong> Employee ID will be automatically generated by the system in the format FE{new Date().getFullYear().toString().slice(-2)}{(new Date().getMonth() + 1).toString().padStart(2, '0')}XXXX
                </p>
              </div>
              
              {/* Basic Information Section */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white border-b border-gray-200 dark:border-gray-700 pb-2">Basic Information</h3>
              
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="name">Name *</Label>
                    <Input
                      id="name"
                      value={createUserData.name}
                      onChange={(e) => setCreateUserData(prev => ({ ...prev, name: e.target.value }))}
                      placeholder="Enter full name"
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="email">Email *</Label>
                    <Input
                      id="email"
                      type="email"
                      value={createUserData.email}
                      onChange={(e) => setCreateUserData(prev => ({ ...prev, email: e.target.value }))}
                      placeholder="Enter email address"
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="password">Password *</Label>
                    <Input
                      id="password"
                      type="password"
                      value={createUserData.password}
                      onChange={(e) => setCreateUserData(prev => ({ ...prev, password: e.target.value }))}
                      placeholder="Enter password"
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="phone">Phone</Label>
                    <Input
                      id="phone"
                      value={createUserData.phone}
                      onChange={(e) => setCreateUserData(prev => ({ ...prev, phone: e.target.value }))}
                      placeholder="Enter phone number"
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="department">Department</Label>
                    <Input
                      id="department"
                      value={createUserData.department}
                      onChange={(e) => setCreateUserData(prev => ({ ...prev, department: e.target.value }))}
                      placeholder="Enter department"
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="manager">Manager</Label>
                    <Input
                      id="manager"
                      value={createUserData.manager}
                      onChange={(e) => setCreateUserData(prev => ({ ...prev, manager: e.target.value }))}
                      placeholder="Enter manager name"
                    />
                  </div>
                </div>
              </div>
              
              {/* Address Information Section */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white border-b border-gray-200 dark:border-gray-700 pb-2">Address Information</h3>
              
                <div>
                  <Label htmlFor="address">Address</Label>
                  <textarea
                    id="address"
                    value={createUserData.address}
                    onChange={(e) => setCreateUserData(prev => ({ ...prev, address: e.target.value }))}
                    placeholder="Enter complete address"
                    rows={3}
                    className="w-full mt-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                  />
                </div>
                
                <div>
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    value={createUserData.location}
                    onChange={(e) => setCreateUserData(prev => ({ ...prev, location: e.target.value }))}
                    placeholder="Enter location/area"
                  />
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="city">City</Label>
                    <Input
                      id="city"
                      value={createUserData.city}
                      onChange={(e) => setCreateUserData(prev => ({ ...prev, city: e.target.value }))}
                      placeholder="Enter city"
                    />
                  </div>
                  <div>
                    <Label htmlFor="state">State</Label>
                    <Input
                      id="state"
                      value={createUserData.state}
                      onChange={(e) => setCreateUserData(prev => ({ ...prev, state: e.target.value }))}
                      placeholder="Enter state"
                    />
                  </div>
                </div>
              </div>
              
              {/* Identification Documents Section */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white border-b border-gray-200 dark:border-gray-700 pb-2">Identification Documents</h3>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="aadhaarNo">Aadhaar Number</Label>
                    <Input
                      id="aadhaarNo"
                      value={createUserData.aadhaarNo}
                      onChange={(e) => setCreateUserData(prev => ({ ...prev, aadhaarNo: e.target.value }))}
                      placeholder="Enter 12-digit Aadhaar number"
                      maxLength={12}
                    />
                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">12-digit Aadhaar number</p>
                  </div>
                  <div>
                    <Label htmlFor="panNo">PAN Number</Label>
                    <Input
                      id="panNo"
                      value={createUserData.panNo}
                      onChange={(e) => setCreateUserData(prev => ({ ...prev, panNo: e.target.value.toUpperCase() }))}
                      placeholder="Enter PAN number (ABCDE1234F)"
                      maxLength={10}
                    />
                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">Format: ABCDE1234F</p>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Fixed Button Section */}
<div className="sticky bottom-0 bg-white dark:bg-gray-800 pt-4 mt-6 border-t border-gray-200 dark:border-gray-700">
  <div className="flex flex-col sm:flex-row gap-3">
    
    {/* Cancel Button (Red Outline) */}
    <Button
      type="button"
      onClick={() => setShowCreateModal(false)}
      className="flex-1 h-11 border border-red-500 text-red-600 dark:text-red-400 
                 bg-white dark:bg-gray-700 
                 hover:bg-red-50 dark:hover:bg-red-900/30 
                 transition-all duration-200 font-medium rounded-lg shadow-sm"
    >
      Cancel
    </Button>

    {/* Create User Button (Solid Blue) */}
    <Button
      type="button"
      onClick={handleCreateUser}
      disabled={isCreatingUser}
      className="flex-1 h-11 bg-blue-600 hover:bg-blue-700 
                 text-white font-medium rounded-lg shadow-sm
                 disabled:opacity-50 disabled:cursor-not-allowed 
                 transition-all duration-200"
    >
      {isCreatingUser ? (
        <div className="flex items-center justify-center gap-2">
          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
          Creating User...
        </div>
      ) : (
        'Create User'
      )}
    </Button>

  </div>
</div>

          </div>
        </div>
      )}

      {/* Send Warning Modal */}
      {showWarningModal && selectedUser && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Send Warning</h2>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowWarningModal(false)}
                className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="mb-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
              <p className="text-sm text-yellow-800 dark:text-yellow-200">
                <strong>To:</strong> {selectedUser.name} ({selectedUser.email})
              </p>
            </div>
            
            <div className="space-y-4">
              <div>
                <Label htmlFor="warningMessage">Warning Message *</Label>
                <textarea
                  id="warningMessage"
                  value={warningData.message}
                  onChange={(e) => setWarningData(prev => ({ ...prev, message: e.target.value }))}
                  placeholder="Enter warning message..."
                  className="w-full h-24 p-2 border border-gray-300 dark:border-gray-600 rounded-md resize-none bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                />
              </div>
              
              <div>
                <Label htmlFor="warningAttachment">Attachment (PDF)</Label>
                <Input
                  id="warningAttachment"
                  type="file"
                  accept=".pdf"
                  onChange={(e) => handleFileChange(e, 'warning')}
                  className="cursor-pointer"
                />
                {warningData.attachment && (
                  <p className="text-xs text-green-600 mt-1">
                    ✓ {warningData.attachment.name}
                  </p>
                )}
              </div>
            </div>
            
            <div className="flex gap-2 mt-6">
              <Button
                variant="outline"
                onClick={() => setShowWarningModal(false)}
                className="flex-1 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600"
              >
                Cancel
              </Button>
              <Button
                onClick={handleSendWarning}
                className="flex-1 bg-yellow-600 hover:bg-yellow-700 text-white"
              >
                Send Warning
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Send Certificate Modal */}
      {showCertificateModal && selectedUser && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Send Certificate</h2>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowCertificateModal(false)}
                className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="mb-4 p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
              <p className="text-sm text-green-800 dark:text-green-200">
                <strong>To:</strong> {selectedUser.name} ({selectedUser.email})
              </p>
            </div>
            
            <div className="space-y-4">
              <div>
                <Label htmlFor="certificateTitle">Certificate Title *</Label>
                <Input
                  id="certificateTitle"
                  value={certificateData.title}
                  onChange={(e) => setCertificateData(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="e.g., Performance Excellence Award"
                />
              </div>
              
              <div>
                <Label htmlFor="certificateMessage">Certificate Message *</Label>
                <textarea
                  id="certificateMessage"
                  value={certificateData.message}
                  onChange={(e) => setCertificateData(prev => ({ ...prev, message: e.target.value }))}
                  placeholder="Enter certificate message..."
                  className="w-full h-24 p-2 border border-gray-300 dark:border-gray-600 rounded-md resize-none bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                />
              </div>
              
              <div>
                <Label htmlFor="certificateAttachment">Certificate File (PDF)</Label>
                <Input
                  id="certificateAttachment"
                  type="file"
                  accept=".pdf"
                  onChange={(e) => handleFileChange(e, 'certificate')}
                  className="cursor-pointer"
                />
                {certificateData.attachment && (
                  <p className="text-xs text-green-600 mt-1">
                    ✓ {certificateData.attachment.name}
                  </p>
                )}
              </div>
            </div>
            
            <div className="flex gap-2 mt-6">
              <Button
                variant="outline"
                onClick={() => setShowCertificateModal(false)}
                className="flex-1 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600"
              >
                Cancel
              </Button>
              <Button
                onClick={handleSendCertificate}
                className="flex-1 bg-green-600 hover:bg-green-700 text-white"
              >
                Send Certificate
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Popup */}
      <ConfirmationPopup
        isOpen={showDeletePopup}
        onClose={() => {
          setShowDeletePopup(false);
          setSelectedUser(null);
        }}
        onConfirm={handleDeleteUser}
        title="Delete User"
        message={`Are you sure you want to delete ${selectedUser?.name}? This action cannot be undone.`}
        type="danger"
        confirmText="Delete User"
        cancelText="Cancel"
      />

      {/* Success Notification */}
      <SuccessNotification
        isVisible={showSuccessNotification}
        onClose={() => setShowSuccessNotification(false)}
        type={successData.type}
        action={successData.action}
        itemName={successData.itemName}
      />

      {/* User Details Modal */}
      <UserDetailsModal
        isOpen={showUserDetailsModal}
        onClose={() => setShowUserDetailsModal(false)}
        user={selectedUser}
      />

      {/* Inactive User Modal */}
      <InactiveUserModal
        isOpen={showInactiveModal}
        onClose={() => {
          setShowInactiveModal(false);
          setSelectedUser(null);
        }}
        onSuccess={() => {
          fetchUsers();
          fetchUserStats();
        }}
        user={selectedUser}
      />

      {/* Reactivate User Modal */}
      <ReactivateUserModal
        isOpen={showReactivateModal}
        onClose={() => {
          setShowReactivateModal(false);
          setSelectedUser(null);
        }}
        onSuccess={() => {
          fetchUsers();
          fetchUserStats();
        }}
        user={selectedUser}
      />
      </div>
    </div>
  );
};